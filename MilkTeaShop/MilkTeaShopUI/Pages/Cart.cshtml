@page
@model CartModel
@{
    ViewData["Title"] = "Giỏ hàng";
}

<div class="container cart-container">
    <h2 class="mb-4">Giỏ hàng của bạn</h2>

    @Html.AntiForgeryToken()

    <div id="cart-items">
        <!-- Cart items will be rendered here -->
    </div>
    <div class="cart-summary">
        <h4>Tổng cộng: <span id="cart-total">0đ</span></h4>

        <!-- Payment Methods -->
        <div class="payment-methods mb-3">
            <h5>Phương thức thanh toán:</h5>
            <div class="list-group">
                @foreach (var method in Model.PaymentMethods)
                {
                    <label class="list-group-item">
                        <input class="form-check-input me-1" type="radio" name="paymentMethod"
                            value="@method.PaymentMethodId">
                        @method.MethodName
                        <small class="text-muted d-block">@method.Description</small>
                    </label>
                }
            </div>
        </div>

        <button class="btn btn-primary" onclick="checkout()">Thanh toán</button>
    </div>
</div>

@section Scripts {
    <script>
        function loadCart() {
            const cartContainer = document.getElementById('cart-items');
            const cart = JSON.parse(localStorage.getItem('cart')) || [];

            if (cart.length === 0) {
                cartContainer.innerHTML = '<div class="empty-cart">Giỏ hàng trống</div>';
                return;
            }

            let total = 0;
            cartContainer.innerHTML = cart.map(item => {
                total += item.totalPrice;

                // Tạo danh sách extras
                const extrasHtml = item.extras.length > 0
                    ? `<div class="extras-list">
                                            Toppings: ${item.extras.map(extra => `${extra.name} (+${extra.price}đ)`).join(', ')}
                                           </div>`
                    : '';

                return `
                                        <div class="cart-item" data-id="${item.id}">
                                            <img src="${item.image}" alt="${item.name}">
                                            <div class="cart-item-details">
                                                <div class="cart-item-title">${item.name}</div>
                                                <div class="cart-item-size">Size: ${item.variant.size} (${item.variant.price}đ)</div>
                                                ${extrasHtml}
                                                <div class="cart-item-price">Tổng: ${item.totalPrice.toLocaleString()}đ</div>
                                                <div class="quantity-control">
                                                    <button class="quantity-btn" onclick="updateQuantity('${item.id}-${item.variant.id}', -1)">-</button>
                                                    <span>${item.quantity}</span>
                                                    <button class="quantity-btn" onclick="updateQuantity('${item.id}-${item.variant.id}', 1)">+</button>
                                                    <button class="btn btn-danger btn-sm ms-3" onclick="removeItem('${item.id}-${item.variant.id}')">Xóa</button>
                                                </div>
                                            </div>
                                        </div>
                                    `;
            }).join('');

            document.getElementById('cart-total').textContent = total.toLocaleString() + 'đ';
        }

        function updateQuantity(itemKey, change) {
            let cart = JSON.parse(localStorage.getItem('cart')) || [];
            const [productId, variantId] = itemKey.split('-').map(Number);

            const itemIndex = cart.findIndex(item =>
                item.id === productId && item.variant.id === variantId
            );

            if (itemIndex !== -1) {
                cart[itemIndex].quantity += change;
                if (cart[itemIndex].quantity <= 0) {
                    cart = cart.filter((_, index) => index !== itemIndex);
                } else {
                    // Cập nhật tổng giá
                    cart[itemIndex].totalPrice =
                        (cart[itemIndex].variant.price +
                            cart[itemIndex].extras.reduce((sum, extra) => sum + extra.price, 0)) *
                        cart[itemIndex].quantity;
                }
                localStorage.setItem('cart', JSON.stringify(cart));
                loadCart();
                updateCartBadge();
            }
        }

        function removeItem(itemKey) {
            let cart = JSON.parse(localStorage.getItem('cart')) || [];
            const [productId, variantId] = itemKey.split('-').map(Number);

            cart = cart.filter(item =>
                !(item.id === productId && item.variant.id === variantId)
            );

            localStorage.setItem('cart', JSON.stringify(cart));
            loadCart();
            updateCartBadge();
        }

        function checkout() {
            const selectedPayment = document.querySelector('input[name="paymentMethod"]:checked');
            if (!selectedPayment) {
                Swal.fire({
                    icon: 'warning',
                    title: 'Oops...',
                    text: 'Vui lòng chọn phương thức thanh toán'
                });
                return;
            }

            const cart = JSON.parse(localStorage.getItem('cart')) || [];
            if (cart.length === 0) {
                Swal.fire({
                    icon: 'warning',
                    title: 'Oops...',
                    text: 'Giỏ hàng trống'
                });
                return;
            }

            const orderDTO = {
                totalAmount: cart.reduce((sum, item) => sum + item.totalPrice, 0),
                paymentMethodId: parseInt(selectedPayment.value),
                orderDetails: cart.map(item => ({
                    productId: item.id,
                    quantity: item.quantity,
                    unitPrice: item.variant.price,
                    extraProducts: item.extras.map(extra => ({
                        extraProductId: extra.id,
                        quantity: 1
                    }))
                }))
            };

            const token = document.querySelector('input[name="__RequestVerificationToken"]').value;

            fetch('/Cart?handler=Checkout', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                    'RequestVerificationToken': token
                },
                body: JSON.stringify(orderDTO)
            })
                .then(response => response.json())
                .then(data => {
                    if (data.success) {
                        localStorage.removeItem('cart');
                        updateCartBadge();
                        Swal.fire({
                            icon: 'success',
                            title: 'Thành công!',
                            text: 'Đặt hàng thành công',
                            showConfirmButton: false,
                            timer: 1500
                        }).then(() => {
                            window.location.href = '/Products';
                        });
                    } else {
                        Swal.fire({
                            icon: 'error',
                            title: 'Lỗi',
                            text: 'Có lỗi xảy ra: ' + data.message
                        });
                    }
                })
                .catch(error => {
                    Swal.fire({
                        icon: 'error',
                        title: 'Lỗi',
                        text: 'Có lỗi xảy ra khi đặt hàng'
                    });
                    console.error('Error:', error);
                });
        }

        // Load cart when page loads
        document.addEventListener('DOMContentLoaded', loadCart);
    </script>
}